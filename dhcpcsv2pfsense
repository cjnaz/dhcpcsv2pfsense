#!/usr/bin/env python3
"""Merge DHCP static assignments .csv data into pfSense DHCP Server config file. 
"""

__version__ = "V1.0 211025"


#==========================================================
#
#  Chris Nelson, 2021
#
# V1.0 211025  Reworked to use real .xml handling (lxml dependency).  Supports multiple dhcpd subnets.
# V0.1 211009  Bug fix for row ignore based on first column blank.  Properly carry over the real postamble and block indentation.
# V0.0 211007  New
#
# Changes pending
#   
#==========================================================

import argparse
import sys
import os.path
import io
import glob
import csv
import logging
import re
from lxml import etree
import copy

# Configs / Constants
PY_MIN_VERSION = 3.6
IPADDR_FORMAT = r'192.168.([\d]+).\d+'      # Adjust for your local IP subnet strategy
# IPADDR_FORMAT = r'10.([\d]+.[\d]+).\d+'
# IPADDR_FORMAT = r'172.([\d]+.[\d]+).\d+'


py_version = float(sys.version_info.major) + float(sys.version_info.minor)/10
if py_version < PY_MIN_VERSION:
    print (f"Current Python version {py_version} is less than minimum required version {PY_MIN_VERSION} - Aborting")
    sys.exit()


def main():

    # Get dhcpd sections/subnets
    parser = etree.XMLParser(strip_cdata=False)     # CDATA sections retained when working with a full backup
    tree = etree.parse(in_config_file, parser)
    root = tree.getroot()

    dhcpd_root = root                               # case for working with a dhcpd backup
    if root.tag == "pfsense":
        dhcpd_root = root.find("dhcpd")             # case for working with a full backup

    subnets = []
    octet_to_subnet_map = {}
    for child in dhcpd_root:
        octet = get_ip_subnet(child.find("range").find("from").text)
        subnets.append([child.tag, octet])
        octet_to_subnet_map[octet] = child.tag
        logging.debug (f"Found interface <{child.tag}> with IP subnet octet <{octet}>")


    # Get the staticmap template
    found = False
    for subnet in subnets:
        for staticmap in dhcpd_root.find(subnet[0]).findall("staticmap"):
            mac = staticmap.find("mac").text
            if mac == "12:34:56:78:90:ab":
                found = True
                template = copy.deepcopy(staticmap)
                break
        if found:
            break
    if not found:
        logging.error (f"ERROR:  Template <staticmap> block not found in input file.  See documentation.")
        sys.exit()

    template_elements = []          # Get list of elements within the template for later comparison the .cvs columns
    for child in template:
        template_elements.append(child.tag)

    logging.debug (f"Template:\n{etree.tostring(template, encoding='unicode')}")


    # Remove all staticmaps
    for subnet in subnets:
        for staticmap in dhcpd_root.find(subnet[0]).findall("staticmap"):
            logging.debug (f"Removed staticmap block with mac {staticmap.find('mac').text} from subnet {subnet[0]}")
            dhcpd_root.find(subnet[0]).remove(staticmap)


    with io.open(args.CSV_master_list, newline='', encoding="utf-8") as csvfile:
        csv_table = csv.DictReader(csvfile, dialect="excel")

        # Identify CSV file column names that map to <staticmap> fields
        valid_columns = []
        for colname in csv_table.fieldnames:
            if colname not in template_elements:
                logging.info(f"Warning:  CSV file column name <{colname}> not found in the <staticmap> template.  This column will be ignored.")
            else:
                valid_columns.append(colname)
        logging.debug (f"Valid .csv columns: {valid_columns}")


        # Create <staticmap> blocks per the CSV rows
        numrows = 0
        for row in csv_table:
            logging.debug(f".csv line: {row}")

            temp_smap = copy.deepcopy(template)
            if row[csv_table.fieldnames[0]] != "":      # Blank first column in a row comments out the row

                octet = get_ip_subnet(row["ipaddr"])
                if octet not in octet_to_subnet_map:
                    logging.error (f"ERROR:  IP address {row['ipaddr']} not valid or does not map to any defined dhcpd subnet - skipping. \nRow: {row}")
                    continue

                numrows += 1
                for col in valid_columns:
                    col_text = row[col].strip()
                    if col == "mac":
                        col_text = col_text.lower()
                    temp_smap.find(col).text = col_text

                dhcpd_section = octet_to_subnet_map[octet]
                logging.debug(f"Adding to interface <{dhcpd_section}>:\n{etree.tostring(temp_smap, encoding='unicode')}")
                dhcpd_root.find(dhcpd_section).append(temp_smap)

    logging.info(f"Processed {numrows} DHCP static assignments.")

    etree.indent(tree, space="\t")      # Forces cleanup of indentation
    tree.write(out_config_file)         # CDATA sections retained, but outputs in xml short form for null elements


ip_format_re = re.compile(IPADDR_FORMAT)

def get_ip_subnet(ipaddr):
    """Given an IP address, return the subnet octet based on the defined IPADDR_FORMAT
    EG:
        192.168.99.7  returns str "99" with IPADDR_FORMAT = "192.168.([\d]+)"
    """
    out = ip_format_re.match(ipaddr)
    if out:
        subnet = out.group(1)
    else:
        subnet = "ERROR"
        logging.debug (f"ERROR:  Failed getting subnet from ipaddr <{ipaddr}>")

    return subnet

            

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description=__doc__ + __version__, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('Config_backup',
                        help="Path to dhcpd-config...xml backup.  If to dir then use most recent file.  If to file then use that specific file.")
    parser.add_argument('CSV_master_list',
                        help="Path to CSV master list file")
    parser.add_argument('-v', '--verbose', action='count',
                        help="Print status and activity messages.  Double -v for debug logging.")
    parser.add_argument('-V', '--version', action='version', version='%(prog)s ' + __version__,
                        help="Return version number and exit.")

    args = parser.parse_args()

    logging.basicConfig(format='%(message)s')

    if args.verbose is not None:
        if args.verbose == 1:
            logging.getLogger().setLevel(logging.INFO)
        if args.verbose == 2:
            logging.getLogger().setLevel(logging.DEBUG)

    logging.info(__doc__ + __version__)

    if os.path.isdir(args.Config_backup):
        list_of_files = glob.glob(f'{args.Config_backup}/dhcpd-config*.xml')
        in_config_file = max(list_of_files, key=os.path.getctime)
    elif os.path.isfile(args.Config_backup):
        in_config_file = args.Config_backup

    if not os.path.exists(in_config_file):
        logging.error(f"Error:  Input argument Config_backup {args.Config_backup} is not a valid path to a file or directory.")
        sys.exit()

    logging.info (f"Using config backup input file    <{in_config_file}>")

    vnum = 1
    while 1:
        if os.path.exists(in_config_file + f"-csv{vnum}"):
            vnum += 1
        else:
            break

    out_config_file = in_config_file + f"-csv{vnum}"
    logging.info (f"Using config backup output file   <{out_config_file}>")

    if not os.path.exists(args.CSV_master_list):
        logging.error(f"Error:  Input argument CSV_master_list {args.CSV_master_list} is not a valid file path.")
        sys.exit()

    logging.info (f"Using CSV master list input file  <{args.CSV_master_list}>")


    main()
    sys.exit()